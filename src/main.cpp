#include "Common.h"
#include "Graphics.h"

GLfloat triangle1X = 0;
GLfloat triangle1Y = 0;
GLfloat triangle1Z = -5;
GLfloat triangle2X = 0;
GLfloat triangle2Y = 0;
GLfloat triangle2Z = -5;

void render()
{
	//Set the clear colour(background)
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	//clear the colour and depth buffer
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	//switch to model view
	glMatrixMode(GL_MODELVIEW);
	//reset using the identity matrix
	glLoadIdentity();
	
	glTranslatef(triangle1X, triangle1Y, triangle1Z);

	//Begin Drawing triangles
	glBegin(GL_TRIANGLES);
		glColor3f(1.0f, 0.0f, 0.0f); //color of the vertices
		glVertex3f(0.0f, 1.0f, 0.0f); // Top
		glClearColor(1.0f, 0.0f, 0.0f, 0.5f);
		glColor3f(0.0f, 1.0f, 0.0f);
		glVertex3f(0.0f, -1.0f, 0.0f); //Bottom left
		glColor3f(0.0f, 0.0f, 1.0f);
		glVertex3f(2.0f, -1.0f, 0.0f); //Bottom Right
	glEnd();

	//reset using the identity matrix
	glLoadIdentity();

	glTranslatef(triangle2X, triangle2Y, triangle2Z);

	glBegin(GL_TRIANGLES);
		glColor3f(1.0f, 0.0f, 0.0f); //color of the vertices
		glVertex3f(-2.0f, 1.0f, 0.0f); // Top
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(-2.0f, -1.0f, 0.0f); //Bottom left
		glColor3f(0.0f, 0.0f, 1.0f);
		glVertex3f(0.0f, -1.0f, 0.0f); //Bottom Right
	glEnd();

	//glBegin(GL_QUADS);
	//glColor3f(1.0f, 0.0f, 0.0f); //color of the vertices
	//glVertex3f(-2.0f, 1.0f, 0.0f); // Top
	//glColor3f(1.0f, 1.0f, 1.0f);
	//glVertex3f(-2.0f, -1.0f, 0.0f); //Bottom left
	//glColor3f(0.0f, 0.0f, 1.0f);
	//glVertex3f(0.0f, -1.0f, 0.0f); //Bottom Right
	//glColor3f(0.0f, 0.0f, 1.0f);
	//glVertex3f(0.0f, 0.0f, 0.0f); //Bottom Right
	//glEnd();
}

void update()
{

}

int main(int argc, char * arg[])
{
	bool run = true;
	if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
	{
		std::cout << "ERROR SDL_Init" << SDL_GetError() << std::endl;
		return -1;
	}
	SDL_Window * window = SDL_CreateWindow("SDL",  //Window title
							SDL_WINDOWPOS_CENTERED, // x position, centered
							SDL_WINDOWPOS_CENTERED, //y position, centered
							640,					//width in pixels
							480,					//height in pixels
							SDL_WINDOW_OPENGL		//flags
							);

	//Create an OpenGL context associated with the window
	SDL_GLContext glcontext = SDL_GL_CreateContext(window);
	
	initOpenGL();

	//SetViewPort
	setViewPort(640, 480);

	//Value to hold the event generated by SDL
	SDL_Event event;
	//Game Loop
	while(run)
	{
		//While we still have events in the queue
		while (SDL_PollEvent(&event))
		{
			//Get event type
			if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE)
			{
				run = false;
			}
			switch (event.type)
			{
			case SDL_KEYDOWN:
				switch (event.key.keysym.sym)
				{
				case SDLK_LEFT:
					triangle1X -= 1;
					break;
				case SDLK_RIGHT:
					triangle1X += 1;
					break;
				case SDLK_UP:
					triangle1Y += 1;
					break;
				case SDLK_DOWN:
					triangle1Y -= 1;
					break;
				}
				break;
			}
		}

		update();
		render();

		//Call swap so that our GL back buffer is displayed
		SDL_GL_SwapWindow(window); //what does this do?
	}
	SDL_GL_DeleteContext(glcontext);
	SDL_DestroyWindow(window);
	SDL_Quit(); //shouldnt this clear window as well?
    return 0;
}
